program ::= func_and_var
func_and_var ::= eps
func_and_var ::= struct ID { func_and_var } ; func_and_var
func_and_var ::= 全局变量 local
type ::= int
type ::= int62
type ::= float
type ::= double
type ::= void
type ::= char
全局变量 ::= type ID 数组标识 赋值语句1
数组标识 ::= eps
数组标识 ::= [ 常量表达式 ]
赋值语句1 ::= 赋值语句 全局变量2
赋值语句1 ::= ( 形参列表 ) { local }
赋值语句 ::= eps
赋值语句 ::= = 常量表达式
赋值语句 ::= = 求值式
常量表达式 ::= integer
常量表达式 ::= 62integer
常量表达式 ::= float_constant
常量表达式 ::= char
常量表达式 ::= string
常量表达式 ::= ID
全局变量2 ::= , ID 数组标识 赋值语句 全局变量2
全局变量2 ::= eps
全局变量2 ::= ;
形参列表 ::= eps
形参列表 ::= type ID 形参列表2
形参列表2 ::= eps
形参列表2 ::= , type ID 形参列表2
local ::= eps
local ::= 局部变量 local
local ::= for语句 local
local ::= if语句 local
local ::= while语句 local
local ::= return 求值式 ;
local ::= repeat语句
local ::= ID 赋值语句 ; local
局部变量 ::= type ID 赋值语句 局部变量2
局部变量2 ::= , ID 赋值语句 局部变量2
局部变量2 ::= ;
for语句 ::= for ( 可空求值式1 ; 可空求值式 ; 可空求值式3 ) 语句
可空求值式3 ::= ID ++
可空求值式3 ::= eps
语句 ::= { 语句 }
语句 ::= 求值式 ;
语句 ::= for语句
语句 ::= if语句 语句
语句 ::= repeat语句
语句 ::= switch语句 语句
while语句 ::= while ( 求值式 ) 语句
语句 ::= ;
可空求值式1 ::= eps
可空求值式1 ::= type ID 带符号右值
可空求值式 ::= eps
可空求值式 ::= 求值式
求值式 ::= 常量表达式 带符号右值
求值式 ::= ( 求值式 )
带符号右值 ::= eps
带符号右值 ::= + 求值式
带符号右值 ::= - 求值式
带符号右值 ::= * 求值式
带符号右值 ::= / 求值式
带符号右值 ::= % 求值式
带符号右值 ::= < 求值式
带符号右值 ::= > 求值式
带符号右值 ::= = 求值式
带符号右值 ::= == 求值式
带符号右值 ::= ++ 求值式
if语句 ::= if ( 求值式 ) if语句2
if语句2 ::= 语句 if语句3
if语句3 ::= eps
if语句3 ::= else 语句
while语句 ::= while ( 求值式 ) 语句
repeat语句 ::= repeat do { 语句 } until 求值式
return语句 ::= return 常量表达式
return语句 ::= return 表达式
return语句 ::= return ;
return语句 ::= eps
switch语句 ::= switch ( 常量表达式 ) { case 常量表达式 : next } 语句
next ::= braak ; next
next ::= case 常量表达式 : next
next ::= 语句 next
next ::= default : 语句
next ::= eps
